/*
 * Copyright 2021 CoDaPro project. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package de.codapro.niusb.driver;

import com.sun.jna.Callback;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>de.bergerbd.niusb.driver</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
//@Generated("JNAerator")
public interface DriverLibrary extends StdCallLibrary {
	public static final int TRUE = (int)(1);
	public static final int FALSE = (int)(0);
	public static final int NULL = (int)(0);

	public static final int DAQmx_Val_GroupByChannel = (int)0;
	public static final int DAQmx_Val_GroupByScanNumber = (int)1;
	public static final int DAQmx_Val_Rising = (int)10280;
	public static final int DAQmx_Val_Falling = (int)10171;
	public static final int DAQmx_Val_DegC = (int)10143;
	public static final int DAQmx_Val_DegF = (int)10144;
	public static final int DAQmx_Val_Kelvins = (int)10325;
	public static final int DAQmx_Val_DegR = (int)10145;
	public static final int DAQmx_Val_ChannelVoltage = (int)0;
	public static final int DAQmx_Val_ChannelCurrent = (int)1;
	public static final int DAQmx_Val_ChannelHighImpedance = (int)2;
	public static final int DAQmx_Val_Open = (int)10437;
	public static final int DAQmx_Val_Diff = (int)10106;
	public static final int DAQmx_Val_PseudoDiff = (int)12529;
	public static final int DAQmx_Val_Newtons = (int)15875;
	public static final int DAQmx_Val_Pounds = (int)15876;
	public static final int DAQmx_Val_FromCustomScale = (int)10065;
	public static final int DAQmx_Val_Cfg_Default = (int)-1;
	public static final int DAQmx_Val_MetersPerSecondSquared = (int)12470;
	public static final int DAQmx_Val_InchesPerSecondSquared = (int)12471;
	public static final int DAQmx_Val_FiniteSamps = (int)10178;
	public static final int DAQmx_Val_ContSamps = (int)10123;
	public static final int DAQmx_Val_Degrees = (int)10146;
	public static final int DAQmx_Val_Radians = (int)10273;
	public static final int DAQmx_Val_VoltsPerVolt = (int)15896;
	public static final int DAQmx_Val_mVoltsPerVolt = (int)15897;
	public static final int DAQmx_Val_KilogramForce = (int)15877;
	public static final int DAQmx_Val_Pascals = (int)10081;
	public static final int DAQmx_Val_PoundsPerSquareInch = (int)15879;
	public static final int DAQmx_Val_Bar = (int)15880;
	public static final int DAQmx_Val_NewtonMeters = (int)15881;
	public static final int DAQmx_Val_InchOunces = (int)15882;
	public static final int DAQmx_Val_InchPounds = (int)15883;
	public static final int DAQmx_Val_FootPounds = (int)15884;
	public static final int DAQmx_Val_FromTEDS = (int)12516;
	public static final int DAQmx_Val_Amps = (int)10342;
	public static final int DAQmx_Val_DMA = (int)10054;
	public static final int DAQmx_Val_Interrupts = (int)10204;
	public static final int DAQmx_Val_ProgrammedIO = (int)10264;
	public static final int DAQmx_Val_USBbulk = (int)12590;
	public static final int DAQmx_Val_Seconds = (int)10364;
	public static final int DAQmx_Val_Hz = (int)10373;
	public static final int DAQmx_Val_RSE = (int)10083;
	public static final int DAQmx_Val_NRSE = (int)10078;
	public static final int DAQmx_Val_Meters = (int)10219;
	public static final int DAQmx_Val_Inches = (int)10379;
	public static final int DAQmx_Val_Off = (int)10231;
	public static final int DAQmx_Val_Log = (int)15844;
	public static final int DAQmx_Val_LogAndRead = (int)15842;
	public static final int DAQmx_Val_OpenOrCreate = (int)15846;
	public static final int DAQmx_Val_CreateOrReplace = (int)15847;
	public static final int DAQmx_Val_Create = (int)15848;
	public static final int DAQmx_Val_Ohms = (int)10384;
	public static final int DAQmx_Val_Strain = (int)10299;
	public static final int DAQmx_Val_Volts = (int)10348;

	public static final int DAQmx_Val_g = (int)10186;

	public interface DAQmxEveryNSamplesEventCallbackPtr extends Callback {
		int apply(Pointer taskHandle, int everyNsamplesEventType, NativeLong nSamples, Pointer callbackData);
	};
	public interface DAQmxDoneEventCallbackPtr extends Callback {
		int apply(Pointer taskHandle, int status, Pointer callbackData);
	};
	public interface DAQmxSignalEventCallbackPtr extends Callback {
		int apply(Pointer taskHandle, int signalID, Pointer callbackData);
	};

	/**
	 * Original signature : <code>int32 DAQmxCreateTask(const char[], TaskHandle*)</code><br>
	 * <i>native declaration : line 2483</i>
	 */
	int DAQmxCreateTask(byte taskName[], PointerByReference taskHandle);

	/**
	 * Original signature : <code>int32 DAQmxStartTask(TaskHandle)</code><br>
	 * <i>native declaration : line 2487</i>
	 */
	int DAQmxStartTask(Pointer taskHandle);

	/**
	 * Original signature : <code>int32 DAQmxStopTask(TaskHandle)</code><br>
	 * <i>native declaration : line 2488</i>
	 */

	int DAQmxStopTask(Pointer taskHandle);

	/**
	 * Original signature : <code>int32 DAQmxClearTask(TaskHandle)</code><br>
	 * <i>native declaration : line 2490</i>
	 */
	int DAQmxClearTask(Pointer taskHandle);

	/**
	 * /<br>
	 * Original signature : <code>int32 DAQmxCreateAIVoltageChan(TaskHandle, const char[], const char[], int32, float64, float64, int32, const char[])</code><br>
	 * <i>native declaration : line 2516</i>
	 */
	int DAQmxCreateAIVoltageChan(Pointer taskHandle, byte physicalChannel[], byte nameToAssignToChannel[], int terminalConfig, double minVal, double maxVal, int units, byte customScaleName[]);

	/**
	 * (Analog/Counter Timing)<br>
	 * Original signature : <code>int32 DAQmxCfgSampClkTiming(TaskHandle, const char[], float64, int32, int32, uInt64)</code><br>
	 * <i>native declaration : line 2622</i>
	 */
	int DAQmxCfgSampClkTiming(Pointer taskHandle, byte source[], double rate, int activeEdge, int sampleMode, long sampsPerChan);

	/**
	 * /<br>
	 * Original signature : <code>int32 DAQmxReadAnalogF64(TaskHandle, int32, float64, bool32, float64[], uInt32, int32*, bool32*)</code><br>
	 * <i>native declaration : line 2676</i>
	 */
	int DAQmxReadAnalogF64(Pointer taskHandle, int numSampsPerChan, double timeout, NativeLong fillMode, DoubleBuffer readArray, NativeLong arraySizeInSamps, IntBuffer sampsPerChanRead, NativeLongByReference reserved);

	/**
	 * Original signature : <code>int32 DAQmxConfigureLogging(TaskHandle, const char[], int32, const char[], int32)</code><br>
	 * <i>native declaration : line 2720</i>
	 */
	int DAQmxConfigureLogging(Pointer taskHandle, byte filePath[], int loggingMode, byte groupName[], int operation);

	/**
	 * /<br>
	 * Original signature : <code>int32 DAQmxCreateLinScale(const char[], float64, float64, int32, const char[])</code><br>
	 * <i>native declaration : line 2777</i>
	 */
	int DAQmxCreateLinScale(byte name[], double slope, double yIntercept, int preScaledUnits, byte scaledUnits[]);

	/**
	 * Note: This function is obsolete and now always returns zero.<br>
	 * Original signature : <code>bool32 DAQmxIsReadOrWriteLate(int32)</code><br>
	 * <i>native declaration : line 3318</i>
	 */
	NativeLong DAQmxIsReadOrWriteLate(int errorCode);

	/**
	 * /<br>
	 * Original signature : <code>int32 DAQmxGetErrorString(int32, char[], uInt32)</code><br>
	 * <i>native declaration : line 3376</i>
	 */
	int DAQmxGetErrorString(int errorCode, ByteBuffer errorString, NativeLong bufferSize);

	/**
	 * Original signature : <code>int32 DAQmxGetExtendedErrorInfo(char[], uInt32)</code><br>
	 * <i>native declaration : line 3377</i>
	 */
	int DAQmxGetExtendedErrorInfo(ByteBuffer errorString, NativeLong bufferSize);

	/**
	 * Original signature : <code>int32 DAQmxSetAIDataXferMech(TaskHandle, const char[], int32)</code><br>
	 * <i>native declaration : line 4110</i>
	 */
	int DAQmxSetAIDataXferMech(Pointer taskHandle, byte channel[], int data);

	/**
	 * *** Set/Get functions for DAQmx_Task_Name ***<br>
	 * Original signature : <code>int32 DAQmxGetTaskName(TaskHandle, char*, uInt32)</code><br>
	 * <i>native declaration : line 6308</i>
	 */
	int DAQmxGetTaskName(Pointer taskHandle, ByteBuffer data, NativeLong bufferSize);
}
