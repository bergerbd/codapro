package de.codapro.api.annotations;

import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

/**
 * Class annotation for declaring components. A component has an {@code input-stream}
 *   and an {@code output-stream} by default. Besides the <code>@Component</code>
 *   annotation, it is necessary to annotate additional methods within the component.
 *   The number of sources and sinks can be overridden. Any combination of them is
 *   possible.
 *   <br/>
 *   <br/>
 * Additional relevant annotations are: {@link ColumnId}, {@link Input}, {@link Log},
 *   {@link OnEnterGroup}, {@link OnExecute}, {@link OnFinish}, {@link OnInit},
 *   {@link OnLeaveGroup}, {@link OnProcess}, and {@link Output}
 *   <br/>
 *   <br/>
 * There are two possible component lifecycles. In the first you can use the
 *   {@link OnInit}, {@link OnExecute}, and {@link OnFinish} to annotate
 *   methods and implement your own behaviour. The second lifecycle requires
 *   you to use the {@link OnProcess} annotation. Additionally, you can use
 *   the {@link OnInit}, {@link OnEnterGroup}, {@link OnLeaveGroup}, and
 *   {@link OnFinish} annotations.
 */
@Documented
@Retention(RUNTIME)
@Target(TYPE)
@Inherited
public @interface Component {
	/**
	 * Name of the component. This name is used in configuration files.
	 */
	public String name();

	/**
	 * Component's description.
	 */
	public String doc();

	/**
	 * List of input streams that will end at this component.
	 */
	public Input [] sinks() default {@Input(name="input-stream", doc="The component's input stream.", required=true)};

	/**
	 * List of output streams that will be generated by this component.
	 */
	public Output [] sources() default {@Output(name="output-stream", doc="The component's output stream")};
}
